
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  sku: 'sku',
  name: 'name',
  description: 'description',
  category: 'category',
  brand: 'brand',
  provider: 'provider',
  costPrice: 'costPrice',
  salePrice: 'salePrice',
  promoPrice: 'promoPrice',
  percentPrice: 'percentPrice',
  stock: 'stock',
  minStock: 'minStock',
  images: 'images',
  specifications: 'specifications',
  hasVariants: 'hasVariants',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  barcode: 'barcode',
  sku: 'sku',
  name: 'name',
  description: 'description',
  color: 'color',
  design: 'design',
  size: 'size',
  material: 'material',
  costPrice: 'costPrice',
  salePrice: 'salePrice',
  promoPrice: 'promoPrice',
  percentPrice: 'percentPrice',
  stock: 'stock',
  minStock: 'minStock',
  images: 'images',
  specifications: 'specifications',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  address: 'address',
  phone: 'phone',
  purchaseHistory: 'purchaseHistory',
  serviceHistory: 'serviceHistory'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  details: 'details',
  date: 'date',
  products: 'products',
  total: 'total',
  discount: 'discount',
  payments: 'payments'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  product: 'product',
  details: 'details',
  amount: 'amount',
  method: 'method',
  date: 'date',
  category: 'category',
  categoryId: 'categoryId'
};

exports.Prisma.BuyerScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  email: 'email',
  dni: 'dni',
  cuit: 'cuit',
  telefono: 'telefono',
  whatsapp: 'whatsapp',
  fecha_nacimiento: 'fecha_nacimiento',
  direccion: 'direccion',
  acquisition_channel: 'acquisition_channel',
  utm_source: 'utm_source',
  utm_medium: 'utm_medium',
  utm_campaign: 'utm_campaign',
  utm_content: 'utm_content',
  utm_term: 'utm_term',
  segment: 'segment',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  last_interaction: 'last_interaction'
};

exports.Prisma.CommunicationPreferencesScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  email_marketing: 'email_marketing',
  email_transaccional: 'email_transaccional',
  sms_marketing: 'sms_marketing',
  sms_transaccional: 'sms_transaccional',
  whatsapp_marketing: 'whatsapp_marketing',
  whatsapp_transaccional: 'whatsapp_transaccional',
  llamadas_comerciales: 'llamadas_comerciales',
  preferred_channel: 'preferred_channel',
  best_contact_time: 'best_contact_time',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerDeviceScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  marca: 'marca',
  modelo: 'modelo',
  numero_serie: 'numero_serie',
  imei: 'imei',
  color: 'color',
  capacidad: 'capacidad',
  fecha_compra: 'fecha_compra',
  lugar_compra: 'lugar_compra',
  precio_compra: 'precio_compra',
  tiene_garantia: 'tiene_garantia',
  garantia_hasta: 'garantia_hasta',
  is_active: 'is_active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductInteractionScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  productoId: 'productoId',
  productoName: 'productoName',
  tipo: 'tipo',
  session_id: 'session_id',
  user_agent: 'user_agent',
  ip_address: 'ip_address',
  referrer: 'referrer',
  quantity: 'quantity',
  price_at_interaction: 'price_at_interaction',
  createdAt: 'createdAt'
};

exports.Prisma.BrowsingEventScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  session_id: 'session_id',
  page_url: 'page_url',
  page_title: 'page_title',
  time_spent: 'time_spent',
  user_agent: 'user_agent',
  ip_address: 'ip_address',
  referrer: 'referrer',
  device_type: 'device_type',
  createdAt: 'createdAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  tipo: 'tipo',
  rating: 'rating',
  comentario: 'comentario',
  related_order_id: 'related_order_id',
  related_service_id: 'related_service_id',
  related_product_id: 'related_product_id',
  respuesta: 'respuesta',
  respondido_por: 'respondido_por',
  fecha_respuesta: 'fecha_respuesta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  fecha_creacion: 'fecha_creacion',
  monto_total: 'monto_total',
  estado: 'estado',
  metodo_pago: 'metodo_pago',
  info_envio: 'info_envio',
  id_transaccion_pasarela: 'id_transaccion_pasarela'
};

exports.Prisma.OrderDetailScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productoId: 'productoId',
  productoName: 'productoName',
  cantidad: 'cantidad',
  precio_unitario_al_momento_de_compra: 'precio_unitario_al_momento_de_compra'
};

exports.Prisma.POSSaleScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  fecha_creacion: 'fecha_creacion',
  monto_total: 'monto_total',
  estado: 'estado',
  metodo_pago: 'metodo_pago'
};

exports.Prisma.POSSaleDetailScalarFieldEnum = {
  id: 'id',
  posSaleId: 'posSaleId',
  productoId: 'productoId',
  productoName: 'productoName',
  cantidad: 'cantidad',
  precio_unitario_al_momento_de_compra: 'precio_unitario_al_momento_de_compra'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  customerDeviceId: 'customerDeviceId',
  device: 'device',
  client: 'client',
  state: 'state',
  diagnostico: 'diagnostico',
  estado_dispositivo_al_ingresar: 'estado_dispositivo_al_ingresar',
  observaciones: 'observaciones',
  repair: 'repair',
  piezas: 'piezas',
  total: 'total',
  discount: 'discount',
  date: 'date',
  dateOut: 'dateOut',
  fecha_presupuesto: 'fecha_presupuesto',
  fecha_aprobacion: 'fecha_aprobacion',
  garantia_hasta: 'garantia_hasta',
  observaciones_garantia: 'observaciones_garantia',
  payments: 'payments'
};

exports.Prisma.CashflowScalarFieldEnum = {
  id: 'id',
  active: 'active',
  openDate: 'openDate',
  closeDate: 'closeDate',
  openingBalance: 'openingBalance',
  total: 'total',
  expenses: 'expenses',
  cashSales: 'cashSales',
  cashServices: 'cashServices',
  digitalSales: 'digitalSales',
  digitalServices: 'digitalServices',
  observations: 'observations'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  avatar: 'avatar',
  sucursal: 'sucursal'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.CustomerSegment = exports.$Enums.CustomerSegment = {
  VIP: 'VIP',
  FRECUENTE: 'FRECUENTE',
  OCASIONAL: 'OCASIONAL',
  NUEVO: 'NUEVO',
  INACTIVO: 'INACTIVO'
};

exports.CommunicationChannel = exports.$Enums.CommunicationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  PHONE: 'PHONE',
  PUSH_NOTIFICATION: 'PUSH_NOTIFICATION'
};

exports.InteractionType = exports.$Enums.InteractionType = {
  VIEW: 'VIEW',
  ADD_TO_CART: 'ADD_TO_CART',
  REMOVE_FROM_CART: 'REMOVE_FROM_CART',
  PURCHASE: 'PURCHASE',
  WISHLIST: 'WISHLIST',
  SEARCH: 'SEARCH'
};

exports.FeedbackType = exports.$Enums.FeedbackType = {
  ORDER: 'ORDER',
  SERVICE: 'SERVICE',
  WEBSITE: 'WEBSITE',
  PRODUCT: 'PRODUCT',
  OTHER: 'OTHER'
};

exports.DeviceStatus = exports.$Enums.DeviceStatus = {
  FUNCIONANDO: 'FUNCIONANDO',
  CON_FALLAS: 'CON_FALLAS',
  NO_ENCIENDE: 'NO_ENCIENDE',
  PANTALLA_ROTA: 'PANTALLA_ROTA',
  BATERIA_DAÑADA: 'BATERIA_DAÑADA',
  MOJADO: 'MOJADO',
  OTROS: 'OTROS'
};

exports.Prisma.ModelName = {
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  Customer: 'Customer',
  Sale: 'Sale',
  Expense: 'Expense',
  Buyer: 'Buyer',
  CommunicationPreferences: 'CommunicationPreferences',
  CustomerDevice: 'CustomerDevice',
  ProductInteraction: 'ProductInteraction',
  BrowsingEvent: 'BrowsingEvent',
  Feedback: 'Feedback',
  Order: 'Order',
  OrderDetail: 'OrderDetail',
  POSSale: 'POSSale',
  POSSaleDetail: 'POSSaleDetail',
  Service: 'Service',
  Cashflow: 'Cashflow',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
